Project                      # Root directory of the project
├── MentorTools
│   ├── api                  # Folder for API specifications or documentation
│   ├── cmd                  # Folder for each microservice's main entry point
│   │   ├── auth-service     # Authentication service
│   │   │   ├── Dockerfile   # Dockerfile for building the auth-service container
│   │   │   └── main.go      # Main Go file for auth-service
│   │   ├── dictionary-service # Dictionary service for word management
│   │   │   ├── Dockerfile   # Dockerfile for building the dictionary-service container
│   │   │   └── main.go      # Main Go file for dictionary-service
│   │   ├── gpt-service      # GPT service for interacting with OpenAI or similar APIs
│   │   │   ├── Dockerfile   # Dockerfile for building the gpt-service container
│   │   │   └── main.go      # Main Go file for gpt-service
│   │   └── user-service     # User service for managing user profiles and connections
│   │       ├── Dockerfile   # Dockerfile for building the user-service container
│   │       └── main.go      # Main Go file for user-service
│   ├── deployments          # Folder for deployment configurations
│   │   └── docker           # Docker deployment configurations
│   ├── fe                   # Frontend source code
│   ├── internal             # Internal service-specific implementations and logic
│   │   ├── auth-service     # Folder for authentication service implementation
│   │   │   ├── handlers     # HTTP handlers for auth-service
│   │   │   │   ├── login_handler.go   # Handler for user login
│   │   │   │   └── register_handler.go # Handler for user registration
│   │   │   ├── models       # Data models for auth-service
│   │   │   │   └── user.go  # User data model definition
│   │   │   └── repository   # Database-related files for auth-service
│   │   │       ├── create-table-roles.sql    # SQL script to create roles table
│   │   │       ├── create-table-users.sql    # SQL script to create users table
│   │   │       ├── db.go     # Database connection and operations
│   │   │       ├── fn_create_user.sql  # SQL function to create a user
│   │   │       ├── fn_find_user_by_email.sql # SQL function to find a user by email
│   │   │       └── initial-data-roles.sql # SQL script for initial role data
│   │   ├── dictionary-service # Folder for dictionary service implementation
│   │   │   ├── handlers     # HTTP handlers for dictionary-service
│   │   │   ├── models       # Data models for dictionary-service
│   │   │   └── repository   # Database-related files for dictionary-service
│   │   ├── gpt-service      # Folder for GPT service implementation
│   │   │   ├── handlers     # HTTP handlers for gpt-service
│   │   │   ├── models       # Data models for gpt-service
│   │   │   └── repository   # Database-related files for gpt-service
│   │   └── user-service     # Folder for user service implementation
│   │       ├── handlers     # HTTP handlers for user-service
│   │       ├── models       # Data models for user-service
│   │       └── repository   # Database-related files for user-service
│   ├── letsencrypt          # Folder for SSL certificates and configurations
│   ├── pkg                  # Shared packages for configurations, logging, etc.
│   │   ├── common           # Common utilities and error handling
│   │   │   └── errors.go    # Common error definitions
│   │   ├── config           # Configuration loading and management
│   │   │   ├── config.go    # Go code to load and handle configuration
│   │   │   └── config.yaml  # YAML configuration file with database settings
│   │   ├── logger           # Logging utility functions
│   │   └── middleware       # Shared middleware for services
│   └── scripts              # Scripts for database initialization or other setup tasks
│       └── init-auth-db.sql # SQL script for initializing the auth-service database
├── .htpasswd                # Password file for Traefik or other basic auth
├── docker-compose.yml       # Docker Compose configuration file for orchestrating services
├── go.mod                   # Go module dependencies
└── project_structure.txt    # Text file documenting the project's structure


идентификатор моего приватного ключа 4qn4vdn2dkrg35ok36ot99pyn
